#! /bin/bash

####################################################################################
#
#                                      Huggin API
#
####################################################################################

# 8/7/24 DH: TODO: Create Python auto test system

# -------------------------------------------------------------------------
# Path cascade for various utils
# ------------------------------
# MAKE:
# -----
# 'test-qa-efficacy.py'
#   => 'checkpointing.createLoggers()'
#     => 'CWD/JSON::output_dir'
#       => 'graphs'
#       => 'weights'
#
# 'SCRIPTDIR/gv-graphs'
#   => FILES: qca.log, pdf
#
# USE:
# ----
# 'graph-weights.py'
#   => 'CFGDIR/JSON::output_dir/old-logs'
#
# 'graph-losses.py'
#   => 'CFGDIR/JSON::output_dir/weights'
#
# 'graph-node-logits.py'
#   => 'SCRIPTDIR/JSON::output_dir/gv-graphs'
#
# 'create-gv-output.py'
#   => 'CFGDIR', 'JSON::output_dir'
#   => FILES: graphs for pdf
# -------------------------------------------------------------------------

SCRIPTDIR=$(dirname "$0")
SCRIPTNAME=$(basename "$0")
CWD=$(pwd)

# TODO: Decide if this should be hard-coded across mutliple files (as currently is)
CFGDIR="/Users/doug/src/ai/t5"
HFOUTDIR="previous_output_dir-Google-BERT"

# ------------------------ CONFIG OF MODEL TRAINING STATE + DATA TYPE ------------------
#                          ------------------------------------------
JSONCFG="qa_train-Google-BERT-SQUAD.json"
#JSONCFG="qa_train-Google-BERT-custom.json"

# 2/8/24 DH: This needs to be: "CWD/HFOUTDIR", in order to run local model 
#            (but particular model can be chosen with: "${CFGDIR}/${HFOUTDIR}")
#TLD="${CFGDIR}/${HFOUTDIR}"
TLD="${CWD}/${HFOUTDIR}"
# --------------------------------------------------------------------------------------

CORRECTLOG="correct-answers.log"
IDXSLOG="dataset-idxs.log"
RECORDid="efficacy-record-id.txt"
usedIDXS=""

DBDIR="/Users/doug/src/ai/bert"
DBNAME="stack_trace.db"
TABLENAMEstats="model_efficacy"
TABLENAMEindices="sample_indices"

# 9/7/24 DH: Now moving from SCRIPTDIR to CWD
QArunTLD="${CWD}/${HFOUTDIR}"

# 9/7/24 DH: Prev used SCRIPTDIR but better to use 'cwd' (which gets propagated)
mkdir -p ${CWD}/gv-graphs

echo
echo "--------------- SCRIPT PARAMS ------------------"
echo "                -------------"
echo "Model TLD:  '${TLD}'"
echo "Run cfg:     ${JSONCFG}"
echo "Output dir: '${CWD}'"
echo "------------------------------------------------"
echo

counter=0

# ((expression)) The "expression" is evaluated according to the rules described under ARITHMETIC EVALUATION.
#                This is exactly equivalent to let "expression".

# ======================================= INDIV SCRIPTS ================================================
# --------------------------------- NON-TRAINING SAMPLE -------------------------------
let counter++
echo "${counter}) test-qa-efficacy.py"
echo "----------------------"

# 7/7/24 DH: Pass TLD (so script can be run from any dir NOT JUST FROM 'CFGDIR')
echo ${TLD} > tld.txt

testRuns=1
python ${SCRIPTDIR}/test-qa-efficacy.py ${CFGDIR}/${JSONCFG}
# 8/7/24 DH: Save "$?" since it changes after the conditional "test"
retVal=$?

# 11/8/24 DH: Record SQUAD idx's used from 'dataset-idxs.log'
usedIDXS+=$(cat ${IDXSLOG})
echo
echo "USED INDICES: ${usedIDXS}"
echo

# 5/8/24 DH: Get % correct stats 
#   [ 'test-qa-efficacy::displayResults(...)' determines correct answers from 'test-qa-efficacy::runRandSamples(..., iterations)' 
#     BUT 'test-qa-efficacy.py' DOES NOT KNOW HOW TIMES IT IS CALLED BEFORE A CORRECT ANSWER IS FOUND, 
#     so it needs to populate 'checkpointing::gCorrectLogFilename'  ]
while [ ${retVal} -ne 0 ]
do
  # 8/7/24 DH: 126 stops normal cycle that may never end in dev (https://tldp.org/LDP/abs/html/exitcodes.html)
  if [ ${retVal} -eq 126 ]; then
    echo "'126' returned so exiting..."
    exit
  fi

  # "correct-answers.log" will be OLD DATA
  echo "No correct answers found so rerunning (after ${testRuns} runs)..."
  echo

  #echo "Exiting during dev..."
  #exit
  #echo "Continuing during dev..."
  #break

  let testRuns++
  python ${SCRIPTDIR}/test-qa-efficacy.py ${CFGDIR}/${JSONCFG}
  retVal=$?

  # 11/8/24 DH: Record SQUAD idx's used from 'dataset-idxs.log'
  usedIDXS+=","$(cat ${IDXSLOG})
  echo
  echo "USED INDICES: ${usedIDXS}"
  echo
done

# 5/8/24 DH: Get number of correct answers (easier to read `` with list assingnment "()" than "$()" below)
#            https://www.gnu.org/software/bash/manual/html_node/Arrays.html
logVals=(`cat ${CORRECTLOG} | awk -F': ' '{print $2}'`)
correctNum=${logVals[0]}
iterNum=${logVals[1]}
echo
echo "Number correct: ${correctNum}"
echo "Iterations per run: ${iterNum}"
echo "Number of runs: ${testRuns}"

let totalSamples="testRuns * iterNum" # 8 secs per sample
let percentCorrect="correctNum * 100 / totalSamples"

echo "Proportion correct: ${correctNum}/${totalSamples} (${percentCorrect} %)"
echo

# (better to use "$()" than `` above, done for ease of reading with list assignment "()")
modelTypeState=$( python ${SCRIPTDIR}/model_type_state.py ${TLD} ${CFGDIR}/${JSONCFG} )

# 12/8/24 DH: ID of last record added is printed to '${RECORDid}' for Bash-Python "Named Pipe" IPC
python ${SCRIPTDIR}/db_utils.py ${DBDIR}/${DBNAME} ${TABLENAMEstats} ${modelTypeState} ${correctNum} ${totalSamples}

statsRecordID=$( cat ${RECORDid} )
# 12/8/24 DH: Add 'usedIDXS' to DB ('db-indices.py' WRAPPER AROUND 'db_utils.py')
python ${SCRIPTDIR}/db-indices.py ${DBDIR}/${DBNAME} ${TABLENAMEindices} ${statsRecordID} ${totalSamples} ${usedIDXS}

# --------------------------------- GRAPH TRAINING WEIGHTS + LOSSES -------------------------------
let counter++
echo "${counter}) graph-weights.py"
echo "-------------------"
###############################################
# Append cmd with "&" to "background" process #
###############################################

echo "ONLY saving graphs (not showing them)"
python ${SCRIPTDIR}/graph-weights.py ${TLD}/weights

# 21/6/24 DH: Add 'graph-losses.py'
let counter++
echo "${counter}) graph-losses.py"
echo "-------------------"
echo "ONLY saving graphs (not showing them)"
python ${SCRIPTDIR}/graph-losses.py ${TLD}/weights

# --------------------------------- GRAPH NON-TRAINING LOGITS -----------------------------
let counter++
echo "${counter}) graph-node-logits.py"
echo "-----------------------"

echo "ONLY saving graphs (not showing them)"
# 8/7/24 DH: When using 'tld.txt' (see above) then we need to use SAME RELATIVE PATHS as used in 'checkpointing.py::createLoggers(...)'
#            ie NOT '${TLD}'
python ${SCRIPTDIR}/graph-node-logits.py ${QArunTLD}

# Where graphs get saved: (updated after path refactor)
# -----------------------
# test-qa-efficacy.py  = ${QArunTLD}/graphs
#                        (via 'qa_lime.py::graphTokenVals(...)')
#                          logits-by-token-<token len>.png
#
# graph-weights.py     = ${TLD}/old-logs/weights-graphs
#                          0-fullValues.png, 1025-fullValues.png, total-weight-change.png
# graph-losses.py      = ${TLD}/weights/weights-graphs
#                          losses-by-epochs<cnt>.png
# graph-node-logits.py = ${CWD}/gv-graphs
#                          all_layers-287-<token len>.png
#

# --------------------------------- PRODUCE GRAPHVIZ PDF -------------------------------
let counter++
echo "${counter}) create-gv-output.py"
echo "----------------------"
python ${SCRIPTDIR}/create-gv-output.py ${CFGDIR} ${HFOUTDIR}
retVal=$?
if [ ${retVal} -ne 0 ]; then
  echo
  echo "Error in 'create-gv-output.py' so exiting..."
  echo
  exit
fi

# 19/6/24 DH: ...and finally we have our HuggingFace/Bert Q&A output...
#             (from "DeepPavlov ODQA pipe", Dec 23, 2023, that has no 'qa_outputs' layer...!)

# 1/7/24 DH: Remove 'quarantine' file extended attribute
xattr -c $(cat gv_filename.txt)

open $(cat gv_filename.txt)

